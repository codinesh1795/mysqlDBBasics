-- CREATE DATABSE demo;
-- CREATE DATABASE MACHINES;
-- CREATE DATABASE COMPUTER;
-- SHOW DATABASES;
-- DROP DATABASE demo;
-- create database pc;
-- selecting a databse - USE machines;
-- use machines;
-- how to know which databse we are using - SELECT DATABASE();
-- use pc;
create table games (
    name VARCHAR(50),
    ratings INT
)

SHOW TABLES:
SHOW COLUMNS FROM TABLE_NAME;
DESC TABLE_NAME; or DESCRIBE TABLE_NAME;

How to add default values for table COLUMNS
create table games (
    name VARCHAR(50) DEFAULT 'Anon',
    release_year INT DEFAULT 2024,
    ratings INT
);

Drop/Delete table
DROP TABLE TABLE_NAME;

most commonly used DataTypes
CHAR(size) - fixed length - padded with spaces to fill fixed length
VARCHAR(size)- variable length with max defined - actual storage size = length of string +1; no padding
                efficiently stores vairable length strings
INT
DECIMAL(p,s) - used to store exact numeric values p- total no of digits, s-no of digits after decimal point
DATA - 'YYYY-MM-DD'
TIME - 'HH:MM:SS'
DATETIME - 'YYYY-MM-DD HH:MM:SS'

INSERT INTO games(name,ratings) - insert data labels
VALUES('GAT6',6); - insert values for labels

SELECT ratings FROM games; - select specific property from a table
SELECT ratings,name FROM games; select multiple properties
SELECT * FROM games; - select everything

Primary Keys;- is a unique identifier for each record in table,
            helps maintain data integrity
            cannot have null values
            each value in column must be unique

cannot insert data with same value for primary Keys

CREATE TABLE MOVIES (
    id INT PRIMARY KEY AUTO_INCREMENT, -- this is primary key/unique key
    title VARCHAR(50),
    genre VARCHAR(50),
    director VARCHAR(50),
    cast_count INT,
    language INT,
    release_year INT,
    imdb_ratings INT,
    duration INT
);

WHERE command - keyword to filter records that meet a specified condition
              - used in SELECT, UPDATE, and DELETE statements to narrow down results

SELECT * FROM games WHERE ratings=5;
SELECT title FROM games WHERE ratings=5;

Provide alias for specific item
SELECT id AS movie_id FROM movies; -- masks column name with given alias;


Update data
UPDATE TABLE_NAME
SET col1=name1,col2=val2 ....
WHERE conditon;

UPDATE movies
SET director = 'dinesh'
WHERE id=1;

DELETE FROM movies
WHERE id=1; -- dont do this way 

DELETE FROM USERS; - delete everything

SELECT CURRENT_DATE();
SELECT CURRENT_TIME();
SELECT NOW();  -- for datetime

TIMESTAMP CURRENT_TIMESTAMP example

CREATE TABLE comments(
    id INT AUTO_INCREMENT PRIMARY KEY,
    author VARCHAR(255),
    content VARCHAR(255),
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


SUBSTRING() function - extract substring from a string,
            - specify starting position and length of substring to extract
SUBSTRING(string, start_pos, length)

SELECT SUBSTRING('Dinesh',1,3); --Din
SELECT REPLACE('POOJA Dinesh','Dinesh', 'YADAV');
SELECT REVERSE('DINESH');
SELECT CHAR_LENGTH(string);

also be implemented like SELECT SUBSTRING(col_name, idxfrom,len) FROM table_name;

SELECT column FROM table_name
ORDER BY column1 [ASC|DESC]
eg
SELECT product_id, product_name,price FROM products
ORDER BY price DESC;
LIMIT 10,

LIMIT - clause used to restrict no of rows returned by SELECT command
      - used in conjunction with order by to retreive specific no of rows starting from a particular position in result set.
 
LENGTH(colname) - 
LIKE - operator used in SELECT statement to search for a specified pattern ina column.
    - often used with wildcard characters to perform pattern matching

SELECT *
FROM products
WHERE name LIKE 'A%'; -- starts with A;
                '%A'  -- ends with A;
                '%A%' -- contains A anywhere;
                '-mma' -- search entire table ignoring first char only and rest three equal to mma.

COUNT() - returns no of rows that match a specified condition
SELECT COUNT(*)
FROM products
WHERE category='Electronics';

MIN(), MAX(), SUM(), AVG(), - can be used on COLUMNS

GROUP BY - clause is used in a SELECT statement to group rows that have the same values in specified COLUMNS
SELECT product_id, SUM(quantity)
FROM products
GROUP BY product_id;

NOT EQUAL != operator
GREATER then > 
LESS then <
AND, OR, BETWEEN, IN operator
BETWEEN - includes all values from start to end index given
IN- specify multiple values in a WHERE clause, allowing us to filter the result set based on a list of specific values

SELECT *
FROM USERS
WHERE age > 10;
WHERE age < 50;
WHERE age != 20;
WHERE age < 10 OR age >50;
WHERE age BETWEEN 40 AND 60;
WHERE age IN(30,25,40)

CASE STATEMENT-
SELECT first_name, age,
    CASE
        WHEN AGE < 30 THEN 'YOUNG'
        WHEN AGE >= 30 AND age <=60 THEN 'Middle-aged'
        ELSE 'SENIOR'
    END AS age_group
FROM USERS;

UNIQUE- a key word - constraint is used to ensure that all values in a column are unique- used to enforce data integrity and prevent duplicated
title VARCHAR(255) UNIQUE,  - if someone tries to enter a duplicate entry it will throw error and prevent insertion

CHECK constraint is used to specify condition that must be met for data in a column
emp_age INT CHECK (emp_age>=18 AND emp_age <= 65), -- you will not be able to create and entry for employee greater or less than age given

NAMED CONSTRAINTS -- we can assign our own name to a contrainst using the CONSTRAINT keyword when creating or altering a table
                -- useful for identifying and managing constraints in your database
CONSTRAINT chk_emp_age CHECK (emp_age>=18 AND emp_age <= 65),

ALTER TABLE - statement used to add, modify or drop columns, constraints, indexes in existing table.
            - allows us to change structure of a table without having to drop and recreate it.

ALTER TABLE table_name
ADD column_name datatype;
DROP COLUMN column_name;
MODIFY COLUMN column_name new_datatype;
CHANGE COLUMN old_col_name new_col_name datatype;


Relationships - how data in one table is connected to data in another table.
            - this connetcion is what makes mysql a rdbms
one to one - a relationship where a single record in one table corresponds to exactly one record in another table.
one to many - a single record in one table can be linked to multiple records in another table;
many to many - one record one table can be linked to multiple records in another table and vice versa,

FOREIGN KEY - is like a lable that connects one tables data to another tables data. It ensures that a value in one table exists in another tables column

CREATE TABLE engineer (
    engineer_id INT AUTO_INCREMENT PRIMARY KEY,
    engineer_name VARCHAR(255) NOT NULL,
    profession VARCHAR(255) NOT NULL,
    email VARCHAR(50)
);

CREATE TABLE tasks(
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    task_name VARCHAR(255),
    task_description TEXT,
    engineer_id INT,
    FOREIGN KEY (engineer_id) REFERENCES engineer(engineer_id)
)               task table col1                     engineer table col1

JOIN - CROSS JOIN(least used) - operation that joins each row of one table with every row from another table. It essentially creates a new result set containing all possible combinations of rows from joined tables.
SELECT * FROM engineer CROSS JOIN tasks;

INNER JOIN - selects the records that have matching values in both the tables
SELECT * FROM engineer 
INNER JOIN tasks on engineer.engineer_id=tasks.engineer_id;

SELECT * FROM engineer e
INNER JOIN tasks t on e.engineer_id = t.engineer_id;

LEFT JOIN - returns all records from left table (engineer), and the matched records from the right table (tasks)
            - if no match reult is null
SELECT * FROM engineer e
LEFT JOIN tasks t on e.engineer_id = t.engineer_id;

LRIGHT JOIN - returns all records from right table (tasks), and the matched records from the left table (engineer)
            - if no match reult is null
SELECT * FROM engineer e
RIGHT JOIN tasks t on e.engineer_id = t.engineer_id;

VIEWS - a virtual table that is based on the result set of a SELECT query. It allows you to store a saved query in a db,
        which can then be queried like a table. Views can simplify complex queries, hide complexity from users and provide a layer of abstratction
        over the underlying tables.

SELECT id, CONCAT(first_name, ' ' , last_name) AS full_name FROM employees; -- gives id and full name
now if i want to run this query multiple time we can create a view for that

CREATE VIEW employee_names AS
SELECT id, CONCAT(first_name, ' ' , last_name); -- creating a view

SELECT * FROM employee_names; -- query a view
-- Update a view/ recreate a view
CREATE OR REPLACE VIEW employee_names AS
SELECT id, CONCAT(first_name, ' ' , last_name)
WHERE department = 'IT';

DROP VIEW employee_names; -- delete a view